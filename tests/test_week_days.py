'''
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
DO NOT EDIT THIS FILE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'''

from cmath import exp
import io
from unittest import mock, TestCase

from week_days import day_of_week, favorite_activities, temp_by_day, temp_by_day_continuous


class TestWeekDays(TestCase):

    @mock.patch('sys.stdout', new_callable=io.StringIO)
    def test_day_of_week(self, mock_stdout):
        day_of_week()

        self.assertEqual(
            "Sunday\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\n" * 2,
            mock_stdout.getvalue()
        )

    @mock.patch('builtins.input', return_value='cry')
    @mock.patch('sys.stdout', new_callable=io.StringIO)
    def test_favorite_activities(self, mock_stdout, mock_input):
        favorite_activities()

        expected = "['cry', 'cry', 'cry', 'cry', 'cry', 'cry', 'cry']\n"

        days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
        for day in days:
            expected += f"On {day}s, your favorite activity is to cry.\n"

        self.assertEqual(expected, mock_stdout.getvalue())


    @mock.patch('builtins.input', side_effect=['100', '64', '33', '100', '64', '33', '50'])
    @mock.patch('sys.stdout', new_callable=io.StringIO)
    def test_temp_by_day(self, mock_stdout, mock_input):
        temp_by_day()

        expected = "Put on some sunscreen!\nCozy, grab a sweater\nBrr, put on a jacket!\n" * 2
        expected += "Cozy, grab a sweater\n"

        self.assertEqual(expected, mock_stdout.getvalue())


    @mock.patch('builtins.input', side_effect=['10', '64', '33', '1', '64', '33', '50', '100'])
    @mock.patch('sys.stdout', new_callable=io.StringIO)
    def test_temp_by_day_continuous(self, mock_stdout, mock_input):
        temp_by_day_continuous()

        expected = "Wear a sweater\n" * 7
        expected += "Spring has sprung!\n"

        self.assertEqual(expected, mock_stdout.getvalue())
